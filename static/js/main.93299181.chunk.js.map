{"version":3,"sources":["App.js","index.js"],"names":["CrudoCottoApp","conversionData","alimento","fattore","categoria","setCategoria","useState","Object","keys","setAlimento","quantita","setQuantita","direzione","setDirezione","risultato","setRisultato","setFattore","tema","setTema","isCalcolando","setIsCalcolando","risultatoRef","useRef","useEffect","alimentoScelto","find","item","current","scrollIntoView","behavior","handleDirezioneChange","dir","_jsxs","className","children","_jsx","onClick","resetForm","FiRotateCcw","toggleTema","FiMoon","FiSun","value","onChange","e","nuovaCategoria","target","map","cat","width","height","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","type","val","test","placeholder","calcolaRisultato","setTimeout","q","parseFloat","result","toFixed","disabled","style","position","overflow","top","left","right","bottom","background","backgroundSize","animation","ref","Date","getFullYear","href","ReactDOM","createRoot","document","getElementById","render","React","StrictMode"],"mappings":"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","file":"static/js/main.93299181.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { FiSun, FiMoon, FiRotateCcw } from 'react-icons/fi';\nimport './styles.css';\n\nconst CrudoCottoApp = () => {\n  // Dati delle tabelle di conversione\n  const conversionData = {\n    \"Cereali e derivati\": [\n      { alimento: \"Pasta di semola corta\", fattore: 2.00 },\n      { alimento: \"Pasta di semola lunga\", fattore: 2.40 },\n      { alimento: \"Pasta all'uovo secca\", fattore: 3.00 },\n      { alimento: \"Riso\", fattore: 2.50 },\n      { alimento: \"Tortellini ravioli freschi\", fattore: 2.00 }\n    ],\n    \"Verdure e ortaggi\": [\n      { alimento: \"Agretti\", fattore: 0.80 },\n      { alimento: \"Asparagi\", fattore: 0.90 },\n      { alimento: \"Bieta\", fattore: 0.80 },\n      { alimento: \"Broccoletti a testa\", fattore: 0.90 },\n      { alimento: \"Broccoletti di rapa\", fattore: 0.90 },\n      { alimento: \"Carciofi\", fattore: 0.75 },\n      { alimento: \"Cardi\", fattore: 0.60 },\n      { alimento: \"Carote\", fattore: 0.85 },\n      { alimento: \"Cavolfiore\", fattore: 0.90 },\n      { alimento: \"Cavoli di Bruxelles\", fattore: 0.90 },\n      { alimento: \"Cavolo broccolo verde ramoso\", fattore: 0.60 },\n      { alimento: \"Cavolo cappuccio verde\", fattore: 1.00 },\n      { alimento: \"Cavolo verza\", fattore: 1.00 },\n      { alimento: \"Cicoria di campo\", fattore: 1.00 },\n      { alimento: \"Cicoria di taglio coltivata\", fattore: 0.80 },\n      { alimento: \"Cipolle\", fattore: 0.70 },\n      { alimento: \"Finocchi\", fattore: 0.85 },\n      { alimento: \"Funghi\", fattore: 0.60 },\n      { alimento: \"Patata con buccia\", fattore: 1.00 },\n      { alimento: \"Patata pelata\", fattore: 0.85 },\n      { alimento: \"Porri\", fattore: 1.00 },\n      { alimento: \"Rape\", fattore: 0.90 },\n      { alimento: \"Spinaci\", fattore: 0.80 },\n      { alimento: \"Topinabur\", fattore: 1.00 },\n      { alimento: \"Zucchine e zucca\", fattore: 0.90 }\n    ],\n    \"Legumi freschi\": [\n      { alimento: \"Fagiolini\", fattore: 0.95 },\n      { alimento: \"Fave\", fattore: 0.80 },\n      { alimento: \"Piselli\", fattore: 0.87 }\n    ],\n    \"Legumi secchi\": [\n      { alimento: \"Ceci\", fattore: 3.00 },\n      { alimento: \"Fagioli\", fattore: 2.50 },\n      { alimento: \"Lenticchie\", fattore: 2.50 }\n    ]\n  };\n\n  // Stati per l'applicazione\n  const [categoria, setCategoria] = useState(Object.keys(conversionData)[0]);\n  const [alimento, setAlimento] = useState(conversionData[Object.keys(conversionData)[0]][0].alimento);\n  const [quantita, setQuantita] = useState('');\n  const [direzione, setDirezione] = useState('crudoCotto'); // 'crudoCotto' o 'cottoCrudo'\n  const [risultato, setRisultato] = useState(null);\n  const [fattore, setFattore] = useState(conversionData[Object.keys(conversionData)[0]][0].fattore);\n  const [tema, setTema] = useState('light');\n  const [isCalcolando, setIsCalcolando] = useState(false);\n  \n  const risultatoRef = useRef(null);\n\n  // Aggiorna il fattore di conversione quando l'alimento cambia\n  useEffect(() => {\n    const alimentoScelto = conversionData[categoria].find(item => item.alimento === alimento);\n    if (alimentoScelto) {\n      setFattore(alimentoScelto.fattore);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [alimento, categoria]);\n  \n  // Effetto di scrolling\n  useEffect(() => {\n    if (risultato && risultatoRef.current) {\n      risultatoRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  }, [risultato]);\n\n  // Gestisce il cambio di categoria\n  const handleCategoriaChange = (e) => {\n    const nuovaCategoria = e.target.value;\n    setCategoria(nuovaCategoria);\n    setAlimento(conversionData[nuovaCategoria][0].alimento);\n  };\n\n  // Gestisce il cambio di alimento\n  const handleAlimentoChange = (e) => {\n    setAlimento(e.target.value);\n  };\n\n  // Gestisce il cambio di quantitÃ \n  const handleQuantitaChange = (e) => {\n    const val = e.target.value;\n    if (val === '' || /^\\d*\\.?\\d*$/.test(val)) {\n      setQuantita(val);\n    }\n  };\n\n  // Gestisce il cambio di direzione (crudo->cotto o cotto->crudo)\n  const handleDirezioneChange = (dir) => {\n    setDirezione(dir);\n  };\n\n  // Calcola il risultato della conversione con animazione\n  const calcolaRisultato = () => {\n    if (!quantita) return;\n\n    setIsCalcolando(true);\n    \n    // Simula un breve ritardo per l'effetto di calcolo\n    setTimeout(() => {\n      const q = parseFloat(quantita);\n      let result;\n\n      if (direzione === 'crudoCotto') {\n        result = q * fattore;\n      } else {\n        result = q / fattore;\n      }\n\n      setRisultato(result.toFixed(1));\n      setIsCalcolando(false);\n    }, 300);\n  };\n\n  // Cambia il tema\n  const toggleTema = () => {\n    setTema(tema === 'light' ? 'dark' : 'light');\n  };\n\n  // Reset del form\n  const resetForm = () => {\n    setCategoria(Object.keys(conversionData)[0]);\n    setAlimento(conversionData[Object.keys(conversionData)[0]][0].alimento);\n    setQuantita('');\n    setRisultato(null);\n  };\n\n  return (\n    <div className={`app-container ${tema}`}>\n      {/* Toggle tema e reset */}\n      <div className=\"control-panel\">\n        <button \n          onClick={resetForm}\n          className=\"control-button\"\n          aria-label=\"Reimposta\"\n        >\n          <FiRotateCcw />\n        </button>\n        <button\n          onClick={toggleTema}\n          className=\"control-button\"\n          aria-label=\"Cambia tema\"\n        >\n          {tema === 'light' ? <FiMoon /> : <FiSun />}\n        </button>\n      </div>\n      \n      <div className=\"main-card\">\n        <h1 className=\"main-title\">CrudoCotto</h1>\n        <p className=\"subtitle\">\n          Converti i pesi degli alimenti da crudi a cotti e viceversa\n        </p>\n        \n        {/* Selezione categoria */}\n        <div className=\"form-group\">\n          <label className=\"form-label\">Categoria</label>\n          <div className=\"select-container\">\n            <select \n              value={categoria} \n              onChange={handleCategoriaChange}\n              className=\"form-select\"\n            >\n              {Object.keys(conversionData).map((cat) => (\n                <option key={cat} value={cat}>\n                  {cat}\n                </option>\n              ))}\n            </select>\n            <div className=\"select-arrow\">\n              <svg width=\"16\" height=\"16\" fill=\"none\" viewBox=\"0 0 24 24\">\n                <path stroke=\"currentColor\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M19 9l-7 7-7-7\"></path>\n              </svg>\n            </div>\n          </div>\n        </div>\n        \n        {/* Selezione alimento */}\n        <div className=\"form-group\">\n          <label className=\"form-label\">Alimento</label>\n          <div className=\"select-container\">\n            <select \n              value={alimento} \n              onChange={handleAlimentoChange}\n              className=\"form-select\"\n            >\n              {conversionData[categoria].map((item) => (\n                <option key={item.alimento} value={item.alimento}>\n                  {item.alimento}\n                </option>\n              ))}\n            </select>\n            <div className=\"select-arrow\">\n              <svg width=\"16\" height=\"16\" fill=\"none\" viewBox=\"0 0 24 24\">\n                <path stroke=\"currentColor\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M19 9l-7 7-7-7\"></path>\n              </svg>\n            </div>\n          </div>\n        </div>\n        \n        {/* Direzione della conversione */}\n        <div className=\"form-group\">\n          <label className=\"form-label\">Conversione</label>\n          <div className=\"direction-toggle\">\n            <button \n              className={`direction-button ${direzione === 'crudoCotto' ? 'active' : ''}`}\n              onClick={() => handleDirezioneChange('crudoCotto')}\n            >\n              Da crudo a cotto\n            </button>\n            <button \n              className={`direction-button ${direzione === 'cottoCrudo' ? 'active' : ''}`}\n              onClick={() => handleDirezioneChange('cottoCrudo')}\n            >\n              Da cotto a crudo\n            </button>\n          </div>\n        </div>\n        \n        {/* Inserimento quantitÃ  */}\n        <div className=\"form-group\">\n          <label className=\"form-label\">\n            QuantitÃ  in grammi ({direzione === 'crudoCotto' ? 'crudo' : 'cotto'})\n          </label>\n          <input \n            type=\"text\" \n            value={quantita} \n            onChange={handleQuantitaChange}\n            placeholder=\"Inserisci la quantitÃ  in grammi\" \n            className=\"form-input\"\n          />\n        </div>\n        \n        {/* Pulsante calcola */}\n        <button \n          onClick={calcolaRisultato}\n          disabled={!quantita || isCalcolando}\n          className=\"calc-button\"\n          style={{ \n            position: 'relative',\n            overflow: 'hidden'\n          }}\n        >\n          {isCalcolando ? \n            \"Calcolando...\" :\n            \"Calcola\"}\n            \n          {isCalcolando && (\n            <span \n              style={{ \n                position: 'absolute',\n                top: 0,\n                left: 0,\n                right: 0,\n                bottom: 0,\n                background: 'linear-gradient(to right, rgba(255,255,255,0) 0%, rgba(255,255,255,0.3) 50%, rgba(255,255,255,0) 100%)',\n                backgroundSize: '200% 100%',\n                animation: 'shimmer 1s infinite'\n              }}\n            ></span>\n          )}\n        </button>\n        \n        {/* Risultato */}\n        {risultato && (\n          <div className=\"result-box\" ref={risultatoRef}>\n            <p className=\"result-label\">Risultato della conversione</p>\n            <div className=\"result-value-container\">\n              <div className=\"result-value\">{risultato} g</div>\n              <div className=\"result-unit\">\n                {direzione === 'crudoCotto' ? 'cotto' : 'crudo'}\n              </div>\n            </div>\n            <p className=\"factor-info\">\n              Fattore di conversione: {fattore}\n            </p>\n          </div>\n        )}\n        \n        <div className=\"footer\">\n          CrudoCotto &copy; {new Date().getFullYear()} | \n          <a href=\"https://github.com/aleattino\">\n            aleattino\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CrudoCottoApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport './styles.css';\nimport CrudoCottoApp from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <CrudoCottoApp />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}